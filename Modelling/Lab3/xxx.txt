
import sys
from PyQt5 import uic, QtWidgets, QtGui
from PyQt5.QtCore import QObject, pyqtSlot, Qt
from PyQt5.QtWidgets import QApplication, QWidget, QListWidgetItem, QTableWidgetItem

import numpy
from numpy.linalg.linalg import LinAlgError

def buildCoeffMatrix(Matrix):
    Matrix = numpy.array(Matrix)
    Count = len(Matrix)
    Result = numpy.zeros((Count, Count))
    for State in range(Count - 1):
        for col in range(Count):
            Result[State, State] -= Matrix[State, col]
        for row in range(Count):
            Result[State, row] += Matrix[row, State]

    for State in range(Count):
        Result[Count - 1, State] = 1
    return Result

def buildAugmentationMatrix(Count):
    Result = [0 for i in range(Count)]
    Result[Count - 1] = 1
    return numpy.array(Result)

def getSystemTimes(Matrix):
    try:
        Result = numpy.linalg.solve(buildCoeffMatrix(Matrix), buildAugmentationMatrix(len(Matrix)))
    except LinAlgError:
        Result = []
    return Result

class MainWindow(QWidget):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.UI = uic.loadUi("MainWindow.ui", self)
        self.UI.tableWidgetMatrix.horizontalHeader().setDefaultSectionSize(30)
        self.tableWidgetMatrix.itemChanged.connect(lambda x: self.itemChanged(x))
        self.spinBoxStatesCount.setValue(3)

        for i in range(self.UI.tableWidgetMatrix.rowCount()):
            self.tableWidgetMatrix.setItem(i, i,  QTableWidgetItem())
            item = self.tableWidgetMatrix.item(i, i)
            item.setFlags(item.flags() & Qt.ItemIsEnabled & Qt.ItemIsEditable & Qt.ItemIsSelectable)
            item.setBackground(QtGui.QBrush(Qt.Dense6Pattern))

    def itemChanged(self, value):
        try:
            if value.text() != "":
                float(value.text())
        except ValueError:
            QtWidgets.QMessageBox.critical(None, "Invalid input", "Please, enter a float number!")
            value.setText("")

    @pyqtSlot()
    def onPushButtonSolveClicked(self):
        table = self.GetMatrixFromTable()
        self.UI.listWidgetSolution.clear()
        i = 1
        result = getSystemTimes(table)
        if len(result) == 0:
            QtWidgets.QMessageBox.critical(None, "Invalid input", "Please, enter correct intensities!")
        else:
            for State in result:
                QListWidgetItem("{n}: {time:0.5f}".format(n = i, time = round(State, 5)), self.UI.listWidgetSolution)
                i += 1

    @pyqtSlot('int')
    def onSpinBoxStatesCountValueChanged(self, value):
        self.UI.tableWidgetMatrix.setRowCount(value)
        self.UI.tableWidgetMatrix.setColumnCount(value)
        self.UI.tableWidgetMatrix.clearContents()
        for i in range(self.UI.tableWidgetMatrix.rowCount()):
            self.tableWidgetMatrix.setItem(i, i,  QTableWidgetItem())
            item  = self.tableWidgetMatrix.item(i, i)
            item.setFlags(item.flags() & Qt.ItemIsEnabled & Qt.ItemIsEditable & Qt.ItemIsSelectable)
            item.setBackground(QtGui.QBrush(Qt.Dense6Pattern))


    def GetMatrixFromTable(self):
        Result = []
        try:
            for i in range(self.UI.tableWidgetMatrix.rowCount()):
                row = []
                for j in range(self.UI.tableWidgetMatrix.columnCount()):
                    item  = self.UI.tableWidgetMatrix.item(i, j)
                    val =  item.text() if item and item.text() != "" else "0"
                    row.append(float(val))
                Result.append(row)
        except KeyError:
            print(Result)
            QtWidgets.QMessageBox.critical(None, "Invalid input", "Please, enter a float number!")
        return Result

def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

main()