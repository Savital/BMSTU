```
Метод запроса указывает на тип операции, которая осуществляется в данный момент, то есть что именно веб-сервер должен сделать
URL-документа, чтобы веб сервер знал какой-именно документ нужен.
(ИМЯ_КОСТА и путь)
ВЕРСИЯ ПРОТОКОЛА - какой набор опция поддерживает данный клиент
ЗАГОЛОВОК: значение
Веб сервера переводят в CamelCase
Пустая строка
(Может быть тело)

1.1 (относительный путь + отдельный хост заголовок, а также заголовок connection)


Ответ: Версия HTTP 404 text_hi
mime-type - content-type
пустая строка
(тело ответа)


Можно вводить дополгительные заголовки тем самым расширяя протокол```

http-запрос состоит из
* Строки запроса
 * Метод
 * URL документа
 * Версия
* Заголовок
* Тело запроса

http-методы
Основные:
Получение документов - сценарий загрузки (GET по указанному URL)

HEAD (GET без тела документа - заголовков и статуса) - например при проверке наличия документа (например поисковыми ботами) Если нет документа из head, то можно получить весь после проверки

POST - отправка произвольных данных на сервер (документ или специальный вид (у формы специальная разновидность документа))

...
PUT - отправка документа целиком - разместить документ по указанному url

DELETE - удаление документа

Отключены на публичных серверах:
connect
trace
options

copy, move, mkcol - webdav (управлением коллекцией файлов на веб сервере)

Но используются на внутренних интерфейсах для передачи файлов внутри веб-приложениями

Коды ответа в протоколе http:

* 1хх - информационные (коорлинация действий клиента и веб-сервера)
* 2хх - успешное выполнение запроса
* 3хх - перенаправления (документ может быть получен по-другому url или другие версии есть)
* 4хх - не удалось установить запрос (ошибка у клиента)
* 5хх - ошибка на стороне сервера

Наиболее распрастроненные коды ответов:
* 200 - ОК +Запрос успешно выполнен
* 204 - No content +Запрос выполнен, но документ пуст
* 301 - Moved permamently +документ сменил url
* 302 - Found +Повторить по другому урл
* 304 - Not modified +Использовать кеш - документ не модифицировался

* 400 - bad request +неправильный синтаксис запроса, например слишком длинная строка
* 401 - unathorized +требуется авторизация, то есть необходимо ввести логин и пароль
* 403 - forbidden +нет доступа к ресурсу (неверная авторизация или по другой причине)
* 404 - not found +документ не найден
* 500 - internal server error +неожиданная ошибка сервера (application) - исключение не обработано, ошибка в скрипте
* 502 - bad gateway +проксируемый отвечает с ошибкой
* 504 - gateway timeout +проксируемый сервер не отвечает

Заголовки http
* Общие
 * Content-type (mime-type + options(html + charset))
 * Content-length (message length) - Длина тела сообщения
 * Content-encoding - кодирование исходного документа
 * transfer-encoding - кодирование при передаче документа
 * connetction - управление соединением (названия тех заголовков, которые должны быть отброшены при проксировании)
 * upgrade - смена протокола (например при запуске протокола веб-сокетов)
* Только запроса
 * Authorization - носитель авторизации, токен, логин\пароль
 * Cookie - передача состояния (сессии на сервер)
 * Referer - URL предыдущего документа
 * User-agent - описание веб-клиента, веб-браузера
 * if-modified-since - условный get запрос (304)
 * accept - согласование содержимого (negotiation)
* Только ответа
 * Location - новый URL при перенаправлениях
 * Set-Cookie - установка сессии на клиенте (передача ключа сессии)
 * Last-modified - дата последнего изменения документа
 * Date - Дата на сервере для согласования кешей
 * Server - описание веб-сервера, название и версия

Проксирование - клиент веб серверу, веб-сервер другому и так удаление


Веб-приложение занимается отправкой дкументов с сервера на клиент и сообщений от клиента серверу (http-message)
CSS - cascading style sheets
URL - uniform resource locator

HTTP 1.0 versus HTTP 1.1
По умолчанию закрытое versus По умолчанию открытое (timeout 10 sec)

mime-типы:
html, css, javascript, png, mp4, xml, json
